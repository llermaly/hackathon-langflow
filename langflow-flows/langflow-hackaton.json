{"flows":[{"name":"ecommerce-html-parser","description":"This process receives an HTML document, extracts important shipping details, and returns the cleaned information.","icon":null,"icon_bg_color":null,"data":{"nodes":[{"id":"TextInput-Fpx0q","type":"genericNode","position":{"x":-1517.5234460351896,"y":-530.7577145222425},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"This will receive the HTML from the service.","icon":"type","base_classes":["Message"],"display_name":"HTML input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextInput-Fpx0q"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-1517.5234460351896,"y":-530.7577145222425},"dragging":false},{"id":"OpenAIModel-YkhZp","type":"genericNode","position":{"x":-549.5845803585945,"y":-973.6150525043763},"data":{"type":"OpenAIModel","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schea is a list of dictionarie s\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n        model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"json_mode":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"json_mode","display_name":"JSON Mode","advanced":false,"dynamic":false,"info":"If True, it will output JSON regardless of passing a schema.","title_case":false,"type":"bool"},"max_tokens":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"0","name":"max_tokens","display_name":"Max Tokens","advanced":false,"dynamic":false,"info":"The maximum number of tokens to generate. Set to 0 for unlimited tokens.","title_case":false,"type":"int"},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict"},"model_name":{"trace_as_metadata":true,"options":["gpt-4o","gpt-4-turbo","gpt-4-turbo-preview","gpt-4","gpt-3.5-turbo","gpt-3.5-turbo-0125"],"required":false,"placeholder":"","show":true,"value":"gpt-4o","name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str"},"openai_api_base":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.","title_case":false,"type":"str"},"openai_api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"OPEANAI_KEY","name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"input_types":[],"dynamic":false,"info":"The OpenAI API Key to use for the OpenAI model.","title_case":false,"password":true,"type":"str"},"output_schema":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"value":{},"name":"output_schema","display_name":"Schema","advanced":false,"dynamic":false,"info":"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.","title_case":false,"type":"dict"},"seed":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1,"name":"seed","display_name":"Seed","advanced":true,"dynamic":false,"info":"The seed controls the reproducibility of the job.","title_case":false,"type":"int"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"stream","display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool"},"system_message":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"system_message","display_name":"System Message","advanced":true,"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":0.1,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float"}},"description":"This OpenAI call retrieve a response in json like plain text","icon":"OpenAI","base_classes":["LanguageModel","Message"],"display_name":"OpenAI","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","max_tokens","model_kwargs","json_mode","output_schema","model_name","openai_api_base","openai_api_key","temperature","stream","system_message","seed"],"beta":false,"edited":false},"id":"OpenAIModel-YkhZp"},"selected":false,"width":384,"height":899,"dragging":false,"positionAbsolute":{"x":-549.5845803585945,"y":-973.6150525043763}},{"id":"Prompt-kVH3t","type":"genericNode","position":{"x":-1054.2062381933943,"y":-850.7027380643693},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"{context} \n\n\nHTML code:\n{html}","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt"},"context":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"context","display_name":"context","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"html":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"html","display_name":"html","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Context prompt with the HTML included.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["context","html"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":false,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"id":"Prompt-kVH3t","description":"Create a prompt template with dynamic variables.","display_name":"Prompt"},"selected":false,"width":384,"height":489,"positionAbsolute":{"x":-1054.2062381933943,"y":-850.7027380643693},"dragging":false},{"id":"Prompt-Ve0hw","type":"genericNode","position":{"x":-1968.048440401909,"y":-896.6046385660746},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"You will receive an HTML file extracted from an e-commerce page, specifically from a shipping page of a specific product. Your task is to extract the most relevant information about the product from the HTML and put it in a JSON file with coherent and precise key-value pairs. I will provide you with an example of how it should look, but don't forget that it's just an example; you can add more keys if necessary:\n\n{json_example}\n","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt"},"json_example":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"json_example","display_name":"json_example","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":".","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Context prompt","documentation":"","custom_fields":{"template":["json_example"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":false,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"id":"Prompt-Ve0hw","description":"","display_name":"Context prompt"},"selected":false,"width":384,"height":395,"dragging":false,"positionAbsolute":{"x":-1968.048440401909,"y":-896.6046385660746}},{"id":"TextInput-Z4bmY","type":"genericNode","position":{"x":-2422.698157852122,"y":-893.4775509466841},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{   \"trackingId\": \"UA-123456-1\",   \"storeName\": \"My Store\",   \"productName\": \"My Product\",   \"productPrice\": 100,   \"productDescription\": \"My Product Description\",   \"otherInformation\": [     {       \"key\": \"value\"     }   ],   \"granteeTime\": \"My Grantee\" }","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"Json example provided for illustration.","icon":"type","base_classes":["Message"],"display_name":"Json example","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextInput-Z4bmY"},"selected":false,"width":384,"height":309,"dragging":false,"positionAbsolute":{"x":-2422.698157852122,"y":-893.4775509466841}},{"id":"ParseData-dpW8W","type":"genericNode","position":{"x":-2260.171415140975,"y":-130.65190147677978},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"data","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"\n","name":"sep","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{text}","name":"template","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["data","template","sep"],"beta":false,"edited":false},"id":"ParseData-dpW8W"},"selected":false,"width":384,"height":385,"positionAbsolute":{"x":-2260.171415140975,"y":-130.65190147677978},"dragging":false},{"id":"File-VvC9G","type":"genericNode","position":{"x":-2733.107634185154,"y":-145.64746262404665},"data":{"type":"File","node":{"template":{"_type":"Component","path":{"trace_as_metadata":true,"file_path":"e1d8781e-1ba7-4282-b82d-f967ac412b7b/aliexpress.html","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx"],"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"path","display_name":"Path","advanced":false,"dynamic":false,"info":"Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx","title_case":false,"type":"file"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from pathlib import Path\n\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, Output\nfrom langflow.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"silent_errors":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"silent_errors","display_name":"Silent Errors","advanced":true,"dynamic":false,"info":"If true, errors will not raise an exception.","title_case":false,"type":"bool"}},"description":"Upload HTML file for test the app","icon":"file-text","base_classes":["Data"],"display_name":"File test","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"load_file","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["path","silent_errors"],"beta":false,"edited":false},"id":"File-VvC9G"},"selected":false,"width":384,"height":301,"positionAbsolute":{"x":-2733.107634185154,"y":-145.64746262404665},"dragging":false},{"id":"TextOutput-gDxGW","type":"genericNode","position":{"x":-48.43114885164135,"y":-377.8750443710894},"data":{"type":"TextOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as output.","title_case":false,"type":"str"}},"description":"Display a text output in the Playground.","icon":"type","base_classes":["Message"],"display_name":"Text Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextOutput-gDxGW"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-48.43114885164135,"y":-377.8750443710894},"dragging":false},{"id":"StoreMessage-Qubw8","type":"genericNode","position":{"x":-56.78130727650921,"y":-891.4543016338541},"data":{"type":"StoreMessage","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.inputs import MessageInput, StrInput\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\nfrom langflow.memory import get_messages, store_message\n\n\nclass StoreMessageComponent(Component):\n    display_name = \"Store Message\"\n    description = \"Stores a chat message or text.\"\n    icon = \"save\"\n\n    inputs = [\n        MessageInput(name=\"message\", display_name=\"Message\", info=\"The chat message to be stored.\", required=True),\n        StrInput(\n            name=\"sender\",\n            display_name=\"Sender\",\n            info=\"The sender of the message.\",\n            value=\"AI\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"The name of the sender.\", value=\"AI\", advanced=True\n        ),\n        StrInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat.\",\n            value=\"\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Stored Messages\", name=\"stored_messages\", method=\"store_message\"),\n    ]\n\n    def store_message(self) -> Message:\n        message = self.message\n\n        message.session_id = self.session_id or message.session_id\n        message.sender = self.sender or message.sender\n        message.sender_name = self.sender_name or message.sender_name\n\n        store_message(message, flow_id=self.graph.flow_id)\n        stored = get_messages(session_id=message.session_id, sender_name=message.sender_name, sender=message.sender)\n        self.status = stored\n        return stored\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"value":"","name":"message","display_name":"Message","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The chat message to be stored.","title_case":false,"type":"str"},"sender":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"AI","name":"sender","display_name":"Sender","advanced":true,"dynamic":false,"info":"The sender of the message.","title_case":false,"type":"str"},"sender_name":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"AI","name":"sender_name","display_name":"Sender Name","advanced":true,"dynamic":false,"info":"The name of the sender.","title_case":false,"type":"str"},"session_id":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":false,"dynamic":false,"info":"The session ID of the chat.","title_case":false,"type":"str"}},"description":"A simple register of result","icon":"save","base_classes":["Message"],"display_name":"Results history","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"stored_messages","display_name":"Stored Messages","method":"store_message","value":"__UNDEFINED__","cache":true}],"field_order":["message","sender","sender_name","session_id"],"beta":false,"edited":false},"id":"StoreMessage-Qubw8"},"selected":true,"width":384,"height":395,"positionAbsolute":{"x":-56.78130727650921,"y":-891.4543016338541},"dragging":false}],"edges":[{"source":"TextInput-Z4bmY","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Z4bmYœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-Ve0hw","targetHandle":"{œfieldNameœ:œjson_exampleœ,œidœ:œPrompt-Ve0hwœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"json_example","id":"Prompt-Ve0hw","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-Z4bmY","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-Z4bmY{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Z4bmYœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-Ve0hw{œfieldNameœ:œjson_exampleœ,œidœ:œPrompt-Ve0hwœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","selected":false,"className":""},{"source":"Prompt-Ve0hw","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-Ve0hwœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-kVH3t","targetHandle":"{œfieldNameœ:œcontextœ,œidœ:œPrompt-kVH3tœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"context","id":"Prompt-kVH3t","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-Ve0hw","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-Ve0hw{œdataTypeœ:œPromptœ,œidœ:œPrompt-Ve0hwœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Prompt-kVH3t{œfieldNameœ:œcontextœ,œidœ:œPrompt-kVH3tœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","selected":false,"className":""},{"source":"TextInput-Fpx0q","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Fpx0qœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-kVH3t","targetHandle":"{œfieldNameœ:œhtmlœ,œidœ:œPrompt-kVH3tœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"html","id":"Prompt-kVH3t","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-Fpx0q","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-Fpx0q{œdataTypeœ:œTextInputœ,œidœ:œTextInput-Fpx0qœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-kVH3t{œfieldNameœ:œhtmlœ,œidœ:œPrompt-kVH3tœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"File-VvC9G","sourceHandle":"{œdataTypeœ:œFileœ,œidœ:œFile-VvC9Gœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-dpW8W","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-dpW8Wœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-dpW8W","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"File","id":"File-VvC9G","name":"data","output_types":["Data"]}},"id":"reactflow__edge-File-VvC9G{œdataTypeœ:œFileœ,œidœ:œFile-VvC9Gœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-dpW8W{œfieldNameœ:œdataœ,œidœ:œParseData-dpW8Wœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":"","selected":false},{"source":"ParseData-dpW8W","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-dpW8Wœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"TextInput-Fpx0q","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-Fpx0qœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"TextInput-Fpx0q","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-dpW8W","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-dpW8W{œdataTypeœ:œParseDataœ,œidœ:œParseData-dpW8Wœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-TextInput-Fpx0q{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-Fpx0qœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":"","selected":false},{"source":"Prompt-kVH3t","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-kVH3tœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"OpenAIModel-YkhZp","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-YkhZpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"OpenAIModel-YkhZp","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-kVH3t","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-kVH3t{œdataTypeœ:œPromptœ,œidœ:œPrompt-kVH3tœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-YkhZp{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-YkhZpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"OpenAIModel-YkhZp","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YkhZpœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"TextOutput-gDxGW","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-gDxGWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"TextOutput-gDxGW","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"OpenAIModel","id":"OpenAIModel-YkhZp","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-OpenAIModel-YkhZp{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YkhZpœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-TextOutput-gDxGW{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-gDxGWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"OpenAIModel-YkhZp","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YkhZpœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"StoreMessage-Qubw8","targetHandle":"{œfieldNameœ:œmessageœ,œidœ:œStoreMessage-Qubw8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"message","id":"StoreMessage-Qubw8","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"OpenAIModel","id":"OpenAIModel-YkhZp","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-OpenAIModel-YkhZp{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YkhZpœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-StoreMessage-Qubw8{œfieldNameœ:œmessageœ,œidœ:œStoreMessage-Qubw8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""}],"viewport":{"x":837.4875106715158,"y":609.2948763286645,"zoom":0.36856730432277524}},"is_component":false,"updated_at":"2024-07-06T15:47:48+00:00","webhook":false,"endpoint_name":null,"id":"db9bac21-f408-4682-b3d4-d7247db2a02c","user_id":"160cd125-c365-451f-91a6-512c9ce53b04","folder_id":"8a6eaeb2-45cc-490a-a8d3-de96c98bf069"},{"name":"form-html-parser","description":"This process receives an HTML document, extracts important shipping details, and returns the cleaned information.","icon":null,"icon_bg_color":null,"data":{"nodes":[{"id":"TextInput-W1sOd","type":"genericNode","position":{"x":-1545.6468340120496,"y":-785.0386832873287},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"This will receive the HTML from the service.","icon":"type","base_classes":["Message"],"display_name":"INPUT: HTML from form","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextInput-W1sOd"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-1545.6468340120496,"y":-785.0386832873287},"dragging":false},{"id":"OpenAIModel-s8vpH","type":"genericNode","position":{"x":-656.636454997491,"y":-1320.909215816994},"data":{"type":"OpenAIModel","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schea is a list of dictionarie s\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n        model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"json_mode":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"json_mode","display_name":"JSON Mode","advanced":false,"dynamic":false,"info":"If True, it will output JSON regardless of passing a schema.","title_case":false,"type":"bool"},"max_tokens":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"0","name":"max_tokens","display_name":"Max Tokens","advanced":false,"dynamic":false,"info":"The maximum number of tokens to generate. Set to 0 for unlimited tokens.","title_case":false,"type":"int"},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict"},"model_name":{"trace_as_metadata":true,"options":["gpt-4o","gpt-4-turbo","gpt-4-turbo-preview","gpt-4","gpt-3.5-turbo","gpt-3.5-turbo-0125"],"required":false,"placeholder":"","show":true,"value":"gpt-4o","name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str"},"openai_api_base":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.","title_case":false,"type":"str"},"openai_api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"OPEANAI_KEY","name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"input_types":[],"dynamic":false,"info":"The OpenAI API Key to use for the OpenAI model.","title_case":false,"password":true,"type":"str"},"output_schema":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"value":{},"name":"output_schema","display_name":"Schema","advanced":false,"dynamic":false,"info":"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.","title_case":false,"type":"dict"},"seed":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1,"name":"seed","display_name":"Seed","advanced":true,"dynamic":false,"info":"The seed controls the reproducibility of the job.","title_case":false,"type":"int"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"stream","display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool"},"system_message":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"system_message","display_name":"System Message","advanced":true,"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":0.1,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float"}},"description":"This OpenAI call retrieve a response in json like plain text","icon":"OpenAI","base_classes":["LanguageModel","Message"],"display_name":"OpenAI","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","max_tokens","model_kwargs","json_mode","output_schema","model_name","openai_api_base","openai_api_key","temperature","stream","system_message","seed"],"beta":false,"edited":false},"id":"OpenAIModel-s8vpH"},"selected":false,"width":384,"height":899,"dragging":false,"positionAbsolute":{"x":-656.636454997491,"y":-1320.909215816994}},{"id":"Prompt-AqTsE","type":"genericNode","position":{"x":-1089.3933166392108,"y":-1140.7104551263164},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"{context} \n\nProduct JSON:\n{product_json}\n\nHTML code:\n{html}","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt"},"context":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"context","display_name":"context","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"html":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"html","display_name":"html","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"product_json":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"product_json","display_name":"product_json","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Context prompt with the HTML included.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["context","product_json","html"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":false,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"id":"Prompt-AqTsE","description":"Context prompt with the HTML included.","display_name":"Prompt"},"selected":false,"width":384,"height":583,"positionAbsolute":{"x":-1089.3933166392108,"y":-1140.7104551263164},"dragging":false},{"id":"Prompt-uuxpK","type":"genericNode","position":{"x":-1549.1352343461626,"y":-1306.671685494967},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"You will receive an HTML file extracted from a form of a post office box to enter the data about a purchase that will be received at the post office box. You will also receive a JSON file with relevant information about the product. Your task is to analyze the product JSON and the HTML form, and pair the items with the correct selectors in the form. The goal is to autocomplete the form with that information. The answer must be a JSON file and the JSON should be constructed as follows:\n\n{json_template}\n\nwhere itemExtractedFromShopJson should match the keys corresponding to items such as the tracking ID, the store name, the product name, description, grantee, etc. In the HTML selector, prioritize the ID; if you can't find it, use a class. Add as many keys as you consider necessary but you must to use all the information of the product json.\n\nThe followin is a JSON example:\n{json_example}\n","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt"},"json_example":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"json_example","display_name":"json_example","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"json_template":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"json_template","display_name":"json_template","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":".","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Context prompt","documentation":"","custom_fields":{"template":["json_template","json_example"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":false,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"id":"Prompt-uuxpK","description":".","display_name":"Context prompt"},"selected":false,"width":384,"height":489,"dragging":false,"positionAbsolute":{"x":-1549.1352343461626,"y":-1306.671685494967}},{"id":"TextInput-HooJG","type":"genericNode","position":{"x":-2011.06049715864,"y":-1292.256093738911},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{   \"trackingId\": \"UA-123456-1\",   \"storeName\": \"My Store\",   \"productName\": \"My Product\",   \"productPrice\": 100,   \"productDescription\": \"My Product Description\",   \"otherInformation\": [     {       \"key\": \"value\"     }   ],   \"granteeTime\": \"My Grantee\" }","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"Json example provided for illustration.","icon":"type","base_classes":["Message"],"display_name":"Json example","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextInput-HooJG"},"selected":false,"width":384,"height":309,"dragging":false,"positionAbsolute":{"x":-2011.06049715864,"y":-1292.256093738911}},{"id":"ParseData-3XRfY","type":"genericNode","position":{"x":-2260.171415140975,"y":-130.65190147677978},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"data","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"\n","name":"sep","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{text}","name":"template","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["data","template","sep"],"beta":false,"edited":false},"id":"ParseData-3XRfY"},"selected":false,"width":384,"height":385,"positionAbsolute":{"x":-2260.171415140975,"y":-130.65190147677978},"dragging":false},{"id":"File-EVmb0","type":"genericNode","position":{"x":-2733.107634185154,"y":-93.12409546378333},"data":{"type":"File","node":{"template":{"_type":"Component","path":{"trace_as_metadata":true,"file_path":"74886a2e-cec5-4843-9680-11d93eb6d5e7/form_to_fill.html","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx"],"list":false,"required":false,"placeholder":"","show":true,"value":"form_to_fill.html","name":"path","display_name":"Path","advanced":false,"dynamic":false,"info":"Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx","title_case":false,"type":"file"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from pathlib import Path\n\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, Output\nfrom langflow.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"silent_errors":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"silent_errors","display_name":"Silent Errors","advanced":true,"dynamic":false,"info":"If true, errors will not raise an exception.","title_case":false,"type":"bool"}},"description":"Upload HTML file for test the app","icon":"file-text","base_classes":["Data"],"display_name":"File test","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"load_file","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["path","silent_errors"],"beta":false,"edited":false},"id":"File-EVmb0"},"selected":false,"width":384,"height":301,"positionAbsolute":{"x":-2733.107634185154,"y":-93.12409546378333},"dragging":false},{"id":"TextOutput-c1pkD","type":"genericNode","position":{"x":-179.86271093650242,"y":-708.0113859824581},"data":{"type":"TextOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as output.","title_case":false,"type":"str"}},"description":"Display a text output in the Playground.","icon":"type","base_classes":["Message"],"display_name":"OUTPUT: json with matched data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextOutput-c1pkD"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-179.86271093650242,"y":-708.0113859824581},"dragging":false},{"id":"StoreMessage-VxhSg","type":"genericNode","position":{"x":-184.62037743201046,"y":-1132.3746007318098},"data":{"type":"StoreMessage","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.inputs import MessageInput, StrInput\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\nfrom langflow.memory import get_messages, store_message\n\n\nclass StoreMessageComponent(Component):\n    display_name = \"Store Message\"\n    description = \"Stores a chat message or text.\"\n    icon = \"save\"\n\n    inputs = [\n        MessageInput(name=\"message\", display_name=\"Message\", info=\"The chat message to be stored.\", required=True),\n        StrInput(\n            name=\"sender\",\n            display_name=\"Sender\",\n            info=\"The sender of the message.\",\n            value=\"AI\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"The name of the sender.\", value=\"AI\", advanced=True\n        ),\n        StrInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat.\",\n            value=\"\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Stored Messages\", name=\"stored_messages\", method=\"store_message\"),\n    ]\n\n    def store_message(self) -> Message:\n        message = self.message\n\n        message.session_id = self.session_id or message.session_id\n        message.sender = self.sender or message.sender\n        message.sender_name = self.sender_name or message.sender_name\n\n        store_message(message, flow_id=self.graph.flow_id)\n        stored = get_messages(session_id=message.session_id, sender_name=message.sender_name, sender=message.sender)\n        self.status = stored\n        return stored\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"value":"","name":"message","display_name":"Message","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The chat message to be stored.","title_case":false,"type":"str"},"sender":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"AI","name":"sender","display_name":"Sender","advanced":true,"dynamic":false,"info":"The sender of the message.","title_case":false,"type":"str"},"sender_name":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"AI","name":"sender_name","display_name":"Sender Name","advanced":true,"dynamic":false,"info":"The name of the sender.","title_case":false,"type":"str"},"session_id":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":false,"dynamic":false,"info":"The session ID of the chat.","title_case":false,"type":"str"}},"description":"A simple register of results","icon":"save","base_classes":["Message"],"display_name":"Results history","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"stored_messages","display_name":"Stored Messages","method":"store_message","value":"__UNDEFINED__","cache":true}],"field_order":["message","sender","sender_name","session_id"],"beta":false,"edited":false},"id":"StoreMessage-VxhSg"},"selected":false,"width":384,"height":395,"positionAbsolute":{"x":-184.62037743201046,"y":-1132.3746007318098},"dragging":false},{"id":"TextInput-mGK31","type":"genericNode","position":{"x":-1546.1477507892728,"y":-451.13927966518105},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"json extracted from ecommerce page","icon":"type","base_classes":["Message"],"display_name":"INPUT: Ecommerce json","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextInput-mGK31"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-1546.1477507892728,"y":-451.13927966518105},"dragging":false},{"id":"TextInput-QuqQb","type":"genericNode","position":{"x":-2260.060824756998,"y":290.0203068001688},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{   \"trackingId\": \"8190032481404275\",   \"storeName\": \"FUNCHOICE Store\",   \"productName\": \"1000 in 1 Universal Remote Control K-1028E AC Digital LCD for Air Conditioner\",   \"productPrice\": 2.39,   \"productDescription\": \"1000 in 1 Universal Remote Control K-1028E AC Digital LCD for Air Conditioner, WHITE\",   \"otherInformation\": [     {       \"key\": \"Order Status\",       \"value\": \"Esperando entrega\"     },     {       \"key\": \"Estimated Delivery Date\",       \"value\": \"11 jul, 2024\"     },     {       \"key\": \"Order Date\",       \"value\": \"3 jul, 2024\"     },     {       \"key\": \"Payment Method\",       \"value\": \"Tarjeta de crédito/débito\"     },     {       \"key\": \"Buyer Protection\",       \"value\": \"La protección del comprador te permite conseguir tu reembolso dentro del periodo de protección si tu artículo no llega, llega dañado, o no llega acorde a su descripción.\"     },     {       \"key\": \"Free Returns\",       \"value\": \"¿No estás satisfecho con tu pedido? Envíalo dentro de los 90 días siguientes de hacerlo. La primera devolución de cada pedido es gratuita.\"     },     {       \"key\": \"Fast Delivery\",       \"value\": \"Cupón de US $1.00 por entrega tardía · Reembolso por artículos que llegan dañados · Reembolso por pérdida del paquete · Reembolso si no llega en 30 días\"     }   ],   \"granteeTime\": \"El sistema confirmará automáticamente la recepción después de 74 días. Si hay algún problema, puede solicitar un reembolso/devolución dentro de los 90 días posteriores a la colocación del pedido.\" }","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"json extracted from ecommerce page","icon":"type","base_classes":["Message"],"display_name":"json test","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextInput-QuqQb"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-2260.060824756998,"y":290.0203068001688},"dragging":false},{"id":"TextInput-LfWTi","type":"genericNode","position":{"x":-2007.0870381482027,"y":-972.6229998091246},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{   \"itemExtractedFromShopJson\": {     \"HTMLselectorType\": \"class or id\",     \"HTMLselectorValue\": \"value of id or class\",     \"value\": \"value of the item\"   } }","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"Json example provided for illustration.","icon":"type","base_classes":["Message"],"display_name":"Json example","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextInput-LfWTi"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-2007.0870381482027,"y":-972.6229998091246},"dragging":false}],"edges":[{"source":"TextInput-HooJG","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-HooJGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-uuxpK","targetHandle":"{œfieldNameœ:œjson_exampleœ,œidœ:œPrompt-uuxpKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"json_example","id":"Prompt-uuxpK","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-HooJG","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-HooJG{œdataTypeœ:œTextInputœ,œidœ:œTextInput-HooJGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-uuxpK{œfieldNameœ:œjson_exampleœ,œidœ:œPrompt-uuxpKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","selected":false,"className":""},{"source":"Prompt-uuxpK","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-uuxpKœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-AqTsE","targetHandle":"{œfieldNameœ:œcontextœ,œidœ:œPrompt-AqTsEœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"context","id":"Prompt-AqTsE","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-uuxpK","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-uuxpK{œdataTypeœ:œPromptœ,œidœ:œPrompt-uuxpKœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Prompt-AqTsE{œfieldNameœ:œcontextœ,œidœ:œPrompt-AqTsEœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","selected":false,"className":""},{"source":"TextInput-W1sOd","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-W1sOdœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-AqTsE","targetHandle":"{œfieldNameœ:œhtmlœ,œidœ:œPrompt-AqTsEœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"html","id":"Prompt-AqTsE","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-W1sOd","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-W1sOd{œdataTypeœ:œTextInputœ,œidœ:œTextInput-W1sOdœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-AqTsE{œfieldNameœ:œhtmlœ,œidœ:œPrompt-AqTsEœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"File-EVmb0","sourceHandle":"{œdataTypeœ:œFileœ,œidœ:œFile-EVmb0œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-3XRfY","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-3XRfYœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-3XRfY","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"File","id":"File-EVmb0","name":"data","output_types":["Data"]}},"id":"reactflow__edge-File-EVmb0{œdataTypeœ:œFileœ,œidœ:œFile-EVmb0œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-3XRfY{œfieldNameœ:œdataœ,œidœ:œParseData-3XRfYœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":"","selected":false},{"source":"ParseData-3XRfY","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-3XRfYœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"TextInput-W1sOd","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-W1sOdœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"TextInput-W1sOd","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-3XRfY","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-3XRfY{œdataTypeœ:œParseDataœ,œidœ:œParseData-3XRfYœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-TextInput-W1sOd{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-W1sOdœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":"","selected":false},{"source":"Prompt-AqTsE","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-AqTsEœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"OpenAIModel-s8vpH","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-s8vpHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"OpenAIModel-s8vpH","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-AqTsE","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-AqTsE{œdataTypeœ:œPromptœ,œidœ:œPrompt-AqTsEœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-s8vpH{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-s8vpHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"OpenAIModel-s8vpH","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-s8vpHœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"TextOutput-c1pkD","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-c1pkDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"TextOutput-c1pkD","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"OpenAIModel","id":"OpenAIModel-s8vpH","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-OpenAIModel-s8vpH{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-s8vpHœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-TextOutput-c1pkD{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-c1pkDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"OpenAIModel-s8vpH","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-s8vpHœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"StoreMessage-VxhSg","targetHandle":"{œfieldNameœ:œmessageœ,œidœ:œStoreMessage-VxhSgœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"message","id":"StoreMessage-VxhSg","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"OpenAIModel","id":"OpenAIModel-s8vpH","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-OpenAIModel-s8vpH{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-s8vpHœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-StoreMessage-VxhSg{œfieldNameœ:œmessageœ,œidœ:œStoreMessage-VxhSgœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"TextInput-QuqQb","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-QuqQbœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"TextInput-mGK31","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-mGK31œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"TextInput-mGK31","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-QuqQb","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-QuqQb{œdataTypeœ:œTextInputœ,œidœ:œTextInput-QuqQbœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-TextInput-mGK31{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-mGK31œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"},{"source":"TextInput-LfWTi","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-LfWTiœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-uuxpK","targetHandle":"{œfieldNameœ:œjson_templateœ,œidœ:œPrompt-uuxpKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"json_template","id":"Prompt-uuxpK","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-LfWTi","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-LfWTi{œdataTypeœ:œTextInputœ,œidœ:œTextInput-LfWTiœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-uuxpK{œfieldNameœ:œjson_templateœ,œidœ:œPrompt-uuxpKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"},{"source":"TextInput-mGK31","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-mGK31œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-AqTsE","targetHandle":"{œfieldNameœ:œproduct_jsonœ,œidœ:œPrompt-AqTsEœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"product_json","id":"Prompt-AqTsE","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-mGK31","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-mGK31{œdataTypeœ:œTextInputœ,œidœ:œTextInput-mGK31œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-AqTsE{œfieldNameœ:œproduct_jsonœ,œidœ:œPrompt-AqTsEœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"}],"viewport":{"x":2573.6654299936404,"y":229.45950688182336,"zoom":1.0000000000000178}},"is_component":false,"updated_at":"2024-07-06T16:59:35+00:00","webhook":false,"endpoint_name":null,"id":"74886a2e-cec5-4843-9680-11d93eb6d5e7","user_id":"160cd125-c365-451f-91a6-512c9ce53b04","folder_id":"8a6eaeb2-45cc-490a-a8d3-de96c98bf069"}],"name":"langflow-hackaton","description":"","folder_name":"langflow-hackaton","folder_description":""}