{"flows":[{"name":"ecommerce-html-parser","description":"This process receives an HTML document, extracts important shipping details, and returns the cleaned information.","icon":null,"icon_bg_color":null,"data":{"nodes":[{"id":"OpenAIModel-YkhZp","type":"genericNode","position":{"x":-551.2000437184996,"y":-973.6150525043763},"data":{"type":"OpenAIModel","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schea is a list of dictionarie s\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n        model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"json_mode":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"json_mode","display_name":"JSON Mode","advanced":false,"dynamic":false,"info":"If True, it will output JSON regardless of passing a schema.","title_case":false,"type":"bool"},"max_tokens":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"0","name":"max_tokens","display_name":"Max Tokens","advanced":false,"dynamic":false,"info":"The maximum number of tokens to generate. Set to 0 for unlimited tokens.","title_case":false,"type":"int"},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict"},"model_name":{"trace_as_metadata":true,"options":["gpt-4o","gpt-4-turbo","gpt-4-turbo-preview","gpt-4","gpt-3.5-turbo","gpt-3.5-turbo-0125"],"required":false,"placeholder":"","show":true,"value":"gpt-4o","name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str"},"openai_api_base":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.","title_case":false,"type":"str"},"openai_api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"TEAM_OPENAI_KEY","name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"input_types":[],"dynamic":false,"info":"The OpenAI API Key to use for the OpenAI model.","title_case":false,"password":true,"type":"str"},"output_schema":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"value":{},"name":"output_schema","display_name":"Schema","advanced":false,"dynamic":false,"info":"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.","title_case":false,"type":"dict"},"seed":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1,"name":"seed","display_name":"Seed","advanced":true,"dynamic":false,"info":"The seed controls the reproducibility of the job.","title_case":false,"type":"int"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"stream","display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool"},"system_message":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"system_message","display_name":"System Message","advanced":true,"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":0.1,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float"}},"description":"This OpenAI call retrieve a response in json like plain text","icon":"OpenAI","base_classes":["LanguageModel","Message"],"display_name":"OpenAI","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","max_tokens","model_kwargs","json_mode","output_schema","model_name","openai_api_base","openai_api_key","temperature","stream","system_message","seed"],"beta":false,"edited":false},"id":"OpenAIModel-YkhZp"},"selected":false,"width":384,"height":899,"dragging":false,"positionAbsolute":{"x":-551.2000437184996,"y":-973.6150525043763}},{"id":"Prompt-kVH3t","type":"genericNode","position":{"x":-1054.2062381933943,"y":-850.7027380643693},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"{context} \n\n\nHTML code:\n{html}","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt"},"context":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"context","display_name":"context","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"html":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"html","display_name":"html","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Context prompt with the HTML included.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["context","html"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":false,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"id":"Prompt-kVH3t","description":"Create a prompt template with dynamic variables.","display_name":"Prompt"},"selected":false,"width":384,"height":489,"positionAbsolute":{"x":-1054.2062381933943,"y":-850.7027380643693},"dragging":false},{"id":"Prompt-Ve0hw","type":"genericNode","position":{"x":-1548.2713008955207,"y":-920.4030278973469},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"You will receive an HTML file extracted from an e-commerce page, specifically from a shipping page of a specific product. Your task is to extract the most relevant information about the product from the HTML and put it in a JSON file with coherent and precise key-value pairs. I will provide you with an example of how it should look, but don't forget that it's just an example; you can add more keys if you consider it necessary but the information must be precise:\n\n{json_example}\n","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt"},"json_example":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"json_example","display_name":"json_example","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":".","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Context prompt","documentation":"","custom_fields":{"template":["json_example"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":false,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"id":"Prompt-Ve0hw","description":".","display_name":"Context prompt"},"selected":false,"width":384,"height":395,"dragging":false,"positionAbsolute":{"x":-1548.2713008955207,"y":-920.4030278973469}},{"id":"TextOutput-5pSOa","type":"genericNode","position":{"x":-2083.3714249855593,"y":-918.0679762461107},"data":{"type":"TextOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{   \"trackingId\": \"UA-123456-1\",   \"storeName\": \"My Store\",   \"productName\": \"My Product\",   \"productPrice\": 100,   \"productDescription\": \"My Product Description\",   \"otherInformation\": [     {       \"key\": \"value\"     }   ],   \"granteeTime\": \"My Grantee\" }","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as output.","title_case":false,"type":"str"}},"description":"Json example provided for illustration.","icon":"type","base_classes":["Message"],"display_name":"Json example","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextOutput-5pSOa"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-2083.3714249855593,"y":-918.0679762461107},"dragging":false},{"id":"ChatInput-OjuKq","type":"genericNode","position":{"x":-2106.7051063202534,"y":-433.5433693180865},"data":{"type":"ChatInput","node":{"template":{"_type":"Component","files":{"trace_as_metadata":true,"file_path":"","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"files","display_name":"Files","advanced":true,"dynamic":false,"info":"Files to be sent with the message.","title_case":false,"type":"file"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as input.","title_case":false,"type":"str"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"required":false,"placeholder":"","show":true,"value":"User","name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"User","name":"sender_name","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Session ID for the message.","title_case":false,"type":"str"}},"description":"This will receive the HTML from the service.","icon":"ChatInput","base_classes":["Message"],"display_name":"HTML input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value","sender","sender_name","session_id","files"],"beta":false,"edited":false},"id":"ChatInput-OjuKq"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-2106.7051063202534,"y":-433.5433693180865},"dragging":false},{"id":"ChatOutput-hQLug","type":"genericNode","position":{"x":-48.27818494375015,"y":-365.80933671075275},"data":{"type":"ChatOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"data_template":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{text}","name":"data_template","display_name":"Data Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","title_case":false,"type":"str"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as output.","title_case":false,"type":"str"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"required":false,"placeholder":"","show":true,"value":"Machine","name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"AI","name":"sender_name","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Session ID for the message.","title_case":false,"type":"str"}},"description":"Send the results","icon":"ChatOutput","base_classes":["Message"],"display_name":"Chat Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","sender","sender_name","session_id","data_template"],"beta":false,"edited":false},"id":"ChatOutput-hQLug"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-48.27818494375015,"y":-365.80933671075275},"dragging":false},{"id":"TextInput-V59vz","type":"genericNode","position":{"x":-1554.5598318784942,"y":-431.17038580937344},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\nfrom typing import Any\nimport re\n\nclass TextInputComponent(Component):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"filter\"\n    \n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        combined_patterns = re.compile(\n            r'(<head.*?>.*?</head>)|'\n            r'(<script.*?>.*?</script>)|'\n            r'(<noscript.*?>.*?</noscript>)|'\n            r'(<style.*?>.*?</style>)|'\n            r'(<!--.*?-->)|'\n            r'(<svg.*?>.*?</svg>)|'\n            r'(<img.*?>)|'\n            r'(<header.*?>.*?</header>)|'\n            r'(<meta.*?>.*?</meta>)|'\n            r'(<footer.*?>.*?</footer>)|'\n            r'(<button.*?>.*?</button>)|'\n            r'(<input.*?type=\"submit\".*?>)|'\n            r'(<source.*?>)|'\n            r'(<picture.*?>.*?</picture>)|'\n            r'(\\sstyle=\".*?\")|'\n            r'(\\ssrc=\".*?\")|'\n            r'(\\shref=\".*?\")|'\n            r'(\\swidth=\".*?\")|'\n            r'(\\sheight=\".*?\")|'\n            r'(\\sdata-a-modal=\".*?\")|'\n            r'(\\sdata-nav-timeline-item=\".*?\")|'\n            r'(\\sdata-acp-tracking=\".*?\")|'\n            r'(\\sclass=\".*?\")|'\n            r'(\\sdata-input=\".*?\")|'\n            r'(\\scarousel-options=\".*?\")|'\n            r'(\\sdata-asin-list=\".*?\")|',\n            re.DOTALL\n        )\n\n        def remove_patterns(html: str, pattern: Any) -> str:\n            return re.sub(pattern, '', html)\n\n        modified_html = remove_patterns(self.input_value, combined_patterns)\n\n        print(\"HTML input len: \", len(self.input_value))\n        print(\"HTML output len: \", len(modified_html))\n\n        return Message(text=modified_html)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"Get text inputs from the Playground.","icon":"filter","base_classes":["Message"],"display_name":"HTML filter","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":true},"id":"TextInput-V59vz","description":"Get text inputs from the Playground.","display_name":"HTML filter"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-1554.5598318784942,"y":-431.17038580937344},"dragging":false}],"edges":[{"source":"Prompt-Ve0hw","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-Ve0hwœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-kVH3t","targetHandle":"{œfieldNameœ:œcontextœ,œidœ:œPrompt-kVH3tœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"context","id":"Prompt-kVH3t","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-Ve0hw","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-Ve0hw{œdataTypeœ:œPromptœ,œidœ:œPrompt-Ve0hwœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Prompt-kVH3t{œfieldNameœ:œcontextœ,œidœ:œPrompt-kVH3tœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","selected":false,"className":""},{"source":"TextOutput-5pSOa","sourceHandle":"{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-5pSOaœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-Ve0hw","targetHandle":"{œfieldNameœ:œjson_exampleœ,œidœ:œPrompt-Ve0hwœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"json_example","id":"Prompt-Ve0hw","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextOutput","id":"TextOutput-5pSOa","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextOutput-5pSOa{œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-5pSOaœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-Ve0hw{œfieldNameœ:œjson_exampleœ,œidœ:œPrompt-Ve0hwœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":"","selected":false},{"source":"Prompt-kVH3t","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-kVH3tœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"OpenAIModel-YkhZp","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-YkhZpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"OpenAIModel-YkhZp","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-kVH3t","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-kVH3t{œdataTypeœ:œPromptœ,œidœ:œPrompt-kVH3tœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-YkhZp{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-YkhZpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"OpenAIModel-YkhZp","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YkhZpœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"ChatOutput-hQLug","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-hQLugœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-hQLug","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"OpenAIModel","id":"OpenAIModel-YkhZp","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-OpenAIModel-YkhZp{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-YkhZpœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-hQLug{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-hQLugœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":"","selected":false},{"source":"ChatInput-OjuKq","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-OjuKqœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"TextInput-V59vz","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-V59vzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"TextInput-V59vz","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-OjuKq","name":"message","output_types":["Message"]}},"id":"reactflow__edge-ChatInput-OjuKq{œdataTypeœ:œChatInputœ,œidœ:œChatInput-OjuKqœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-TextInput-V59vz{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-V59vzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"TextInput-V59vz","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-V59vzœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-kVH3t","targetHandle":"{œfieldNameœ:œhtmlœ,œidœ:œPrompt-kVH3tœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"html","id":"Prompt-kVH3t","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-V59vz","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-V59vz{œdataTypeœ:œTextInputœ,œidœ:œTextInput-V59vzœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-kVH3t{œfieldNameœ:œhtmlœ,œidœ:œPrompt-kVH3tœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""}],"viewport":{"x":992.7434772022466,"y":550.9177472294423,"zoom":0.4352752816480657}},"is_component":false,"updated_at":"2024-07-09T19:13:42+00:00","webhook":false,"endpoint_name":null,"id":"39df0053-5764-4b6d-b00a-5e89bfaaed75","user_id":"160cd125-c365-451f-91a6-512c9ce53b04","folder_id":"97e601aa-7463-44d9-a427-9e072145bea5"},{"name":"form-html-parser","description":"This process receives an HTML document, extracts important shipping details, and returns the cleaned information.","icon":null,"icon_bg_color":null,"data":{"nodes":[{"id":"OpenAIModel-s8vpH","type":"genericNode","position":{"x":-656.636454997491,"y":-1320.909215816994},"data":{"type":"OpenAIModel","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schea is a list of dictionarie s\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n        model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"json_mode":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"json_mode","display_name":"JSON Mode","advanced":false,"dynamic":false,"info":"If True, it will output JSON regardless of passing a schema.","title_case":false,"type":"bool"},"max_tokens":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"0","name":"max_tokens","display_name":"Max Tokens","advanced":false,"dynamic":false,"info":"The maximum number of tokens to generate. Set to 0 for unlimited tokens.","title_case":false,"type":"int"},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict"},"model_name":{"trace_as_metadata":true,"options":["gpt-4o","gpt-4-turbo","gpt-4-turbo-preview","gpt-4","gpt-3.5-turbo","gpt-3.5-turbo-0125"],"required":false,"placeholder":"","show":true,"value":"gpt-4o","name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str"},"openai_api_base":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.","title_case":false,"type":"str"},"openai_api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"TEAM_OPENAI_KEY","name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"input_types":[],"dynamic":false,"info":"The OpenAI API Key to use for the OpenAI model.","title_case":false,"password":true,"type":"str"},"output_schema":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"value":{},"name":"output_schema","display_name":"Schema","advanced":false,"dynamic":false,"info":"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.","title_case":false,"type":"dict"},"seed":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1,"name":"seed","display_name":"Seed","advanced":true,"dynamic":false,"info":"The seed controls the reproducibility of the job.","title_case":false,"type":"int"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"stream","display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool"},"system_message":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"system_message","display_name":"System Message","advanced":true,"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":0.1,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float"}},"description":"This OpenAI call retrieve a response in json like plain text","icon":"OpenAI","base_classes":["LanguageModel","Message"],"display_name":"OpenAI","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","max_tokens","model_kwargs","json_mode","output_schema","model_name","openai_api_base","openai_api_key","temperature","stream","system_message","seed"],"beta":false,"edited":false},"id":"OpenAIModel-s8vpH"},"selected":false,"width":384,"height":899,"dragging":false,"positionAbsolute":{"x":-656.636454997491,"y":-1320.909215816994}},{"id":"Prompt-AqTsE","type":"genericNode","position":{"x":-1089.3933166392108,"y":-1204.905681655527},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"{context} \n\nProduct JSON: and HTML code\n{data}\n","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt"},"context":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"context","display_name":"context","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"data":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"data","display_name":"data","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Context prompt with the HTML included.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["context","data"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":false,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"id":"Prompt-AqTsE","description":"Context prompt with the HTML included.","display_name":"Prompt"},"selected":false,"width":384,"height":489,"positionAbsolute":{"x":-1089.3933166392108,"y":-1204.905681655527},"dragging":false},{"id":"Prompt-uuxpK","type":"genericNode","position":{"x":-1549.1352343461626,"y":-1306.671685494967},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(frontend_template=frontend_node, raw_template=current_build_config[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"You will receive an HTML file extracted from a form of a post office box to enter the data about a purchase that will be received at the post office box. You will also receive a JSON file with relevant information about the product. Your task is to analyze the product JSON and the HTML form, and pair the items with the correct selectors in the form, give me just selectors of items like text inputs, text area, etc. The goal is to autocomplete the form with that information. The answer must be a JSON file and the JSON should be constructed as follows:\n\n{json_template}\n\nwhere itemExtractedFromShopJson should match the keys corresponding to items such as the tracking ID, the store name, the product name, description, grantee, etc. In the HTML selector, prioritize the ID or aria-labelledby; if you can't find it, use a class. Add as many keys as you consider necessary but you must to use all the information of the product json.\n\nThe followin is a JSON example:\n{json_example}\n","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt"},"json_example":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"json_example","display_name":"json_example","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"json_template":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"json_template","display_name":"json_template","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":".","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Context prompt","documentation":"","custom_fields":{"template":["json_template","json_example"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":false,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"id":"Prompt-uuxpK","description":".","display_name":"Context prompt"},"selected":true,"width":384,"height":489,"dragging":false,"positionAbsolute":{"x":-1549.1352343461626,"y":-1306.671685494967}},{"id":"TextInput-HooJG","type":"genericNode","position":{"x":-1977.9902289466224,"y":-1465.3886743782969},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{   \"trackingId\": {     \"HTMLselectorType\": \"id\",     \"HTMLselectorValue\": \"tracking-id\",     \"value\": \"UA-123456-1\"   },   \"storeName\": {     \"HTMLselectorType\": \"class\",     \"HTMLselectorValue\": \"store-name\",     \"value\": \"My Store\"   },   \"productName\": {     \"HTMLselectorType\": \"class\",     \"HTMLselectorValue\": \"product-name\",     \"value\": \"My Product\"   },   \"productPrice\": {     \"HTMLselectorType\": \"id\",     \"HTMLselectorValue\": \"product-price\",     \"value\": 100   },   \"productDescription\": {     \"HTMLselectorType\": \"class\",     \"HTMLselectorValue\": \"product-description\",     \"value\": \"My Product Description\"   },   \"otherInformation\": {     \"HTMLselectorType\": \"class\",     \"HTMLselectorValue\": \"other-info\",     \"value\": [       {         \"key\": \"value\"       }     ]   },   \"granteeTime\": {     \"HTMLselectorType\": \"class\",     \"HTMLselectorValue\": \"grantee-time\",     \"value\": \"My Grantee\"   } }","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"Json example provided for illustration.","icon":"type","base_classes":["Message"],"display_name":"Json example","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextInput-HooJG"},"selected":false,"width":384,"height":309,"dragging":false,"positionAbsolute":{"x":-1977.9902289466224,"y":-1465.3886743782969}},{"id":"TextInput-LfWTi","type":"genericNode","position":{"x":-1977.9073897258345,"y":-1139.9196507640368},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{   \"itemExtractedFromShopJson\": {     \"HTMLselectorType\": \"class or id\",     \"HTMLselectorValue\": \"value of id or class\",     \"value\": \"value of the item\"   } }","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"Json example provided for illustration.","icon":"type","base_classes":["Message"],"display_name":"Json example","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextInput-LfWTi"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-1977.9073897258345,"y":-1139.9196507640368},"dragging":false},{"id":"ChatInput-jrj0K","type":"genericNode","position":{"x":-2013.2934063488847,"y":-719.1697037701177},"data":{"type":"ChatInput","node":{"template":{"_type":"Component","files":{"trace_as_metadata":true,"file_path":"","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"files","display_name":"Files","advanced":true,"dynamic":false,"info":"Files to be sent with the message.","title_case":false,"type":"file"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"<meta itemprop=\"name\" content=\"Test\"><meta itemprop=\"faviconUrl\" content=\"https://ssl.gstatic.com/docs/spreadsheets/forms/forms_icon_2023q4.ico\"><meta itemprop=\"url\" content=\"https://docs.google.com/forms/d/e/1FAIpQLSfuU7AOElNQ5oNp-qvGw7YwyWjd-5o60PzK5p8iKNi7Y01eAw/viewform?usp=embed_googleplus\"><meta itemprop=\"embedURL\" content=\"https://docs.google.com/forms/d/e/1FAIpQLSfuU7AOElNQ5oNp-qvGw7YwyWjd-5o60PzK5p8iKNi7Y01eAw/viewform?embedded=true&amp;usp=embed_googleplus\"><meta itemprop=\"thumbnailUrl\" content=\"https://ssl.gstatic.com/docs/forms/social/social-forms-big-2.png\"><meta itemprop=\"image\" content=\"https://ssl.gstatic.com/docs/forms/social/social-forms-big-2.png\"><meta itemprop=\"imageUrl\" content=\"https://ssl.gstatic.com/docs/forms/social/social-forms-big-2.png\"><div class=\"Uc2NEf\"><div jscontroller=\"rYNGv\" jsaction=\"JIbuQc:KjsqPd\" class=\"HMRMj\"><div role=\"button\" class=\"uArJ5e cd29Sd UQuaGc YhQJj U1dMdf ctEux csJMfd\" jscontroller=\"VXdfxd\" jsaction=\"click:cOuCgd; mousedown:UX7yZ; mouseup:lbsD7e; mouseenter:tfO1Yc; mouseleave:JywGue;touchstart:p6p2H; touchmove:FwuNnf; touchend:yfqBxc(preventDefault=true); touchcancel:JMtRjd;focus:AHmuwe; blur:O22p3e; contextmenu:mg9Pef;\" jsshadow=\"\" jsname=\"CHu7sb\" aria-label=\"Editar este formulario\" tabindex=\"0\" data-tooltip=\"Editar este formulario\" data-redirect-url=\"https://docs.google.com/forms/d/1yW7-aUKdF0eMKB6VLKuKyTvrN2LxvbolWpJb6zYA2hE/edit\" data-target=\"_self\" data-tooltip-position=\"top\" data-tooltip-vertical-offset=\"12\" data-tooltip-horizontal-offset=\"0\"><div class=\"Fvio9d MbhUzd\" jsname=\"ksKsZd\"></div><div class=\"e19J0b CeoRYc\"></div><span jsslot=\"\" class=\"l4V7wb Fxmcue cd29Sd\"><span class=\"E6FpNe Ce1Y1c\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path class=\"PgdKqf\" d=\"M20.41 4.94l-1.35-1.35c-.78-.78-2.05-.78-2.83 0L13.4 6.41 3 16.82V21h4.18l10.46-10.46 2.77-2.77c.79-.78.79-2.05 0-2.83zm-14 14.12L5 19v-1.36l9.82-9.82 1.41 1.41-9.82 9.83z\"></path><path fill=\"none\" d=\"M0 0h24v24H0V0z\"></path></svg></span></span></div></div><div class=\"vnFTpb teQAzf ErmvL KHCwJ\"></div><div class=\"teQAzf\"><form action=\"https://docs.google.com/forms/u/0/d/e/1FAIpQLSfuU7AOElNQ5oNp-qvGw7YwyWjd-5o60PzK5p8iKNi7Y01eAw/formResponse\" target=\"_self\" method=\"POST\" id=\"mG61Hd\" jsmodel=\"TOfxwf Q91hve CEkLOc\" data-shuffle-seed=\"-8983768345472803022\" data-clean-viewform-url=\"https://docs.google.com/forms/d/e/1FAIpQLSfuU7AOElNQ5oNp-qvGw7YwyWjd-5o60PzK5p8iKNi7Y01eAw/viewform\" data-response=\"%.@.]\" data-dlp-data=\"%.@.null,false]\" data-first-entry=\"0\" data-last-entry=\"6\" data-is-first-page=\"true\"><div jscontroller=\"yUS4Lc\" jsaction=\"rcuQ6b:rcuQ6b;UxRBlf:rcuQ6b;\"><div jsname=\"o6bZLc\"><input type=\"hidden\" name=\"entry.2001510577\" value=\"\"><input type=\"hidden\" name=\"entry.1882104105\" value=\"\"><input type=\"hidden\" name=\"entry.19556112\" value=\"\"><input type=\"hidden\" name=\"entry.1753055326\" value=\"\"><input type=\"hidden\" name=\"entry.769367752\" value=\"\"><input type=\"hidden\" name=\"entry.1785967360\" value=\"\"></div></div><div class=\"RH5hzf RLS9Fe\"><div class=\"lrKTG\"><div class=\"Dq4amc\"><div class=\"m7w29c O8VmIc tIvQIf\"><noscript><div class=\"HB1eCd-X3SwIb-haAclf\"><div class=\"HB1eCd-X3SwIb-i8xkGf\"><div class=\"tk3N6e-cXJiPb tk3N6e-cXJiPb-TSZdd tk3N6e-cXJiPb-GMvhG\">El archivo no puede abrirse porque no tienes JavaScript habilitado en tu navegador. Habilítalo y vuelve a cargar el archivo.</div></div><br></div></noscript><div class=\"JH79cc RVEQke b33AEc\"></div><div class=\"N0gd6\"><div class=\"ahS2Le\"><div class=\"F9yp7e ikZYwf LgNcQe\" dir=\"auto\" role=\"heading\" aria-level=\"1\">Test</div></div><div jsname=\"F0H8Yc\" class=\"liS6Hc\"></div></div><div class=\"zAVwcb\"></div><div class=\"DqBBlb\"><div class=\"Oh1Vtf\"><div class=\"tMRmsd\" id=\"wSDd7b\"><div class=\"ut7aeb\"><div class=\"eAQI0e\"><span class=\"EbMsme\">jeffrey.rengifom@gmail.com</span> <a href=\"https://accounts.google.com/AccountChooser?continue=https://docs.google.com/forms/d/e/1FAIpQLSfuU7AOElNQ5oNp-qvGw7YwyWjd-5o60PzK5p8iKNi7Y01eAw/viewform&amp;service=wise\" aria-describedby=\"wSDd7b\" class=\"jZZ5Nd\">Cambiar cuenta</a></div></div><div class=\"ut7aeb KA8vlc\"><div jscontroller=\"By0w6\" jsaction=\"mouseover:eGiyHb; click:eGiyHb; focus:eGiyHb; touchstart:eGiyHb;\" data-tooltip=\"Tu correo electrónico y Cuenta&nbsp;de&nbsp;Google no forman parte de tu respuesta\" aria-label=\"Tu correo electrónico y Cuenta&nbsp;de&nbsp;Google no forman parte de tu respuesta\" role=\"img\" tabindex=\"0\"><div class=\"Axnmtb\"><div class=\"foqfDc gdyQ3c\"><div class=\"Y0xAIe BNL9Bd NpcyEe-n5T17d-Bz112c-xvr5H-lcE6r-JLm1tf-vTZmwf-BvMwwf\" aria-hidden=\"true\">&nbsp;</div><div class=\"Y0xAIe ivmiLb NpcyEe-n5T17d-Bz112c-xvr5H-lcE6r-JLm1tf-vTZmwf-AhqUyc\" aria-hidden=\"true\">&nbsp;</div><div class=\"Y0xAIe tDDvMb NpcyEe-n5T17d-Bz112c-xvr5H-lcE6r-JLm1tf-vTZmwf\" aria-hidden=\"true\">&nbsp;</div></div></div></div><div class=\"Q99PAd\">No compartido</div></div></div><div class=\"UpwdYb\" jscontroller=\"rmdjlf\" jsaction=\"rcuQ6b:npT2md; click:xdDXgc;\"><div class=\"foqfDc gdyQ3c\"><div class=\"Y0xAIe BNL9Bd NpcyEe-n5T17d-Bz112c-DcLNVc-iib5kc-BvMwwf\" aria-hidden=\"true\">&nbsp;</div><div class=\"Y0xAIe ivmiLb NpcyEe-n5T17d-Bz112c-DcLNVc-iib5kc-AhqUyc\" aria-hidden=\"true\">&nbsp;</div><div class=\"Y0xAIe tDDvMb NpcyEe-n5T17d-Bz112c-DcLNVc-iib5kc\" aria-hidden=\"true\">&nbsp;</div></div></div></div></div></div></div><div class=\"o3Dpx\" role=\"list\"><div class=\"Qr7Oae\" role=\"listitem\"><div jsmodel=\"CP1oW\" data-params=\"%.@.[2120551428,&quot;Numero de guia&quot;,null,0,[[2001510577,null,false,null,null,null,null,null,null,null,[]]],null,null,null,null,null,null,[null,&quot;Numero de guia&quot;]],&quot;i1&quot;,&quot;i2&quot;,&quot;i3&quot;,false]\"><div jscontroller=\"sWGJ4b\" jsaction=\"EEvAHc:yfX9oc;\" jsname=\"WsjYwc\" class=\"geS5n\"><div class=\"z12JJ\"><div class=\"M4DNQ\"><div id=\"i1\" class=\"HoXoMd D1wxyf RjsPE\" role=\"heading\" aria-level=\"3\"><span class=\"M7eMe\">Numero de guia</span></div><div class=\"gubaDc OIC90c RjsPE\" id=\"i2\"></div></div></div><div jscontroller=\"oCiKKc\" jsaction=\"rcuQ6b:vZc4S;O22p3e:zjh6rb;b2trFe:eVidQc;sPvj8e:d3sQLd;AHmuwe:h06R8;\" class=\"AgroKb\"><div class=\"rFrNMe k3kHxc RdH0ib yqQS1 zKHdkd\" jscontroller=\"pxq3x\" jsaction=\"clickonly:KjsqPd; focus:Jt1EX; blur:fpfTEe; input:Lg5SV\" jsshadow=\"\" jsname=\"YPqjbf\"><div class=\"aCsJod oJeWuf\"><div class=\"aXBtI Wic03c\"><div class=\"Xb9hP\"><input type=\"text\" class=\"whsOnd zHQkBf\" jsname=\"YPqjbf\" autocomplete=\"off\" tabindex=\"0\" aria-labelledby=\"i1\" aria-describedby=\"i2 i3\" aria-disabled=\"false\" dir=\"auto\" data-initial-dir=\"auto\" data-initial-value=\"\"><div jsname=\"LwH6nd\" class=\"ndJi5d snByac\" aria-hidden=\"true\">Tu respuesta</div></div><div class=\"i9lrp mIZh1c\"></div><div jsname=\"XmnwAc\" class=\"OabDMe cXrdqd\"></div></div></div><div class=\"LXRPh\"><div jsname=\"ty6ygf\" class=\"ovnfwe Is7Fhb\"></div></div></div></div><div jsname=\"Rfh2Tc\" class=\"SL4Sz\" id=\"i3\" role=\"alert\"></div></div></div></div><div class=\"Qr7Oae\" role=\"listitem\"><div jsmodel=\"CP1oW\" data-params=\"%.@.[347172377,&quot;Proveedor&quot;,null,0,[[1882104105,null,false,null,null,null,null,null,null,null,[]]],null,null,null,null,null,null,[null,&quot;Proveedor&quot;]],&quot;i5&quot;,&quot;i6&quot;,&quot;i7&quot;,false]\"><div jscontroller=\"sWGJ4b\" jsaction=\"EEvAHc:yfX9oc;\" jsname=\"WsjYwc\" class=\"geS5n\"><div class=\"z12JJ\"><div class=\"M4DNQ\"><div id=\"i5\" class=\"HoXoMd D1wxyf RjsPE\" role=\"heading\" aria-level=\"3\"><span class=\"M7eMe\">Proveedor</span></div><div class=\"gubaDc OIC90c RjsPE\" id=\"i6\"></div></div></div><div jscontroller=\"oCiKKc\" jsaction=\"rcuQ6b:vZc4S;O22p3e:zjh6rb;b2trFe:eVidQc;sPvj8e:d3sQLd;AHmuwe:h06R8;\" class=\"AgroKb\"><div class=\"rFrNMe k3kHxc RdH0ib yqQS1 zKHdkd\" jscontroller=\"pxq3x\" jsaction=\"clickonly:KjsqPd; focus:Jt1EX; blur:fpfTEe; input:Lg5SV\" jsshadow=\"\" jsname=\"YPqjbf\"><div class=\"aCsJod oJeWuf\"><div class=\"aXBtI Wic03c\"><div class=\"Xb9hP\"><input type=\"text\" class=\"whsOnd zHQkBf\" jsname=\"YPqjbf\" autocomplete=\"off\" tabindex=\"0\" aria-labelledby=\"i5\" aria-describedby=\"i6 i7\" aria-disabled=\"false\" dir=\"auto\" data-initial-dir=\"auto\" data-initial-value=\"\"><div jsname=\"LwH6nd\" class=\"ndJi5d snByac\" aria-hidden=\"true\">Tu respuesta</div></div><div class=\"i9lrp mIZh1c\"></div><div jsname=\"XmnwAc\" class=\"OabDMe cXrdqd\"></div></div></div><div class=\"LXRPh\"><div jsname=\"ty6ygf\" class=\"ovnfwe Is7Fhb\"></div></div></div></div><div jsname=\"Rfh2Tc\" class=\"SL4Sz\" id=\"i7\" role=\"alert\"></div></div></div></div><div class=\"Qr7Oae\" role=\"listitem\"><div jsmodel=\"CP1oW\" data-params=\"%.@.[1658363189,&quot;Descripción&quot;,null,1,[[19556112,null,false,null,null,null,null,null,null,null,[]]],null,null,null,null,null,null,[null,&quot;Descripción&quot;]],&quot;i9&quot;,&quot;i10&quot;,&quot;i11&quot;,false]\"><div jscontroller=\"sWGJ4b\" jsaction=\"EEvAHc:yfX9oc;\" jsname=\"WsjYwc\" class=\"geS5n\"><div class=\"z12JJ\"><div class=\"M4DNQ\"><div id=\"i9\" class=\"HoXoMd D1wxyf RjsPE\" role=\"heading\" aria-level=\"3\"><span class=\"M7eMe\">Descripción</span></div><div class=\"gubaDc OIC90c RjsPE\" id=\"i10\"></div></div></div><div jscontroller=\"oCiKKc\" jsaction=\"rcuQ6b:vZc4S;O22p3e:zjh6rb;b2trFe:eVidQc;sPvj8e:d3sQLd;AHmuwe:h06R8;\" class=\"AgroKb\"><div class=\"edhGSc zKHdkd kRy7qc RdH0ib yqQS1\" jscontroller=\"pxq3x\" jsaction=\"clickonly:KjsqPd; focus:Jt1EX; blur:fpfTEe; input:Lg5SV\" jsshadow=\"\" jsname=\"YPqjbf\"><div class=\"RpC4Ne oJeWuf\"><div class=\"F1pOBe snByac\" aria-hidden=\"true\" jsname=\"LwH6nd\">Tu respuesta</div><div class=\"Pc9Gce Wic03c\"><textarea class=\"KHxj8b tL9Q4c\" jsname=\"YPqjbf\" data-rows=\"1\" tabindex=\"0\" aria-label=\"Tu respuesta\" jscontroller=\"gZjhIf\" jsaction=\"input:Lg5SV;ti6hGc:XMgOHc;rcuQ6b:WYd;\" dir=\"auto\" data-initial-dir=\"auto\" data-initial-value=\"\" aria-labelledby=\"i9\" aria-describedby=\"i10 i11\" style=\"height: 24px;\" aria-disabled=\"false\"></textarea></div><div class=\"z0oSpf mIZh1c\"></div><div jsname=\"XmnwAc\" class=\"Bfurwb cXrdqd\"></div></div><div class=\"jE8NUc\"><div jsname=\"ty6ygf\" class=\"YElZX Is7Fhb\"></div></div></div></div><div jsname=\"Rfh2Tc\" class=\"SL4Sz\" id=\"i11\" role=\"alert\"></div></div></div></div><div class=\"Qr7Oae\" role=\"listitem\"><div jsmodel=\"CP1oW\" data-params=\"%.@.[724055335,&quot;Información adicionl&quot;,null,1,[[1753055326,null,false,null,null,null,null,null,null,null,[]]],null,null,null,null,null,null,[null,&quot;Información adicionl&quot;]],&quot;i13&quot;,&quot;i14&quot;,&quot;i15&quot;,false]\"><div jscontroller=\"sWGJ4b\" jsaction=\"EEvAHc:yfX9oc;\" jsname=\"WsjYwc\" class=\"geS5n\"><div class=\"z12JJ\"><div class=\"M4DNQ\"><div id=\"i13\" class=\"HoXoMd D1wxyf RjsPE\" role=\"heading\" aria-level=\"3\"><span class=\"M7eMe\">Información adicionl</span></div><div class=\"gubaDc OIC90c RjsPE\" id=\"i14\"></div></div></div><div jscontroller=\"oCiKKc\" jsaction=\"rcuQ6b:vZc4S;O22p3e:zjh6rb;b2trFe:eVidQc;sPvj8e:d3sQLd;AHmuwe:h06R8;\" class=\"AgroKb\"><div class=\"edhGSc zKHdkd kRy7qc RdH0ib yqQS1\" jscontroller=\"pxq3x\" jsaction=\"clickonly:KjsqPd; focus:Jt1EX; blur:fpfTEe; input:Lg5SV\" jsshadow=\"\" jsname=\"YPqjbf\"><div class=\"RpC4Ne oJeWuf\"><div class=\"F1pOBe snByac\" aria-hidden=\"true\" jsname=\"LwH6nd\">Tu respuesta</div><div class=\"Pc9Gce Wic03c\"><textarea class=\"KHxj8b tL9Q4c\" jsname=\"YPqjbf\" data-rows=\"1\" tabindex=\"0\" aria-label=\"Tu respuesta\" jscontroller=\"gZjhIf\" jsaction=\"input:Lg5SV;ti6hGc:XMgOHc;rcuQ6b:WYd;\" dir=\"auto\" data-initial-dir=\"auto\" data-initial-value=\"\" aria-labelledby=\"i13\" aria-describedby=\"i14 i15\" style=\"height: 24px;\" aria-disabled=\"false\"></textarea></div><div class=\"z0oSpf mIZh1c\"></div><div jsname=\"XmnwAc\" class=\"Bfurwb cXrdqd\"></div></div><div class=\"jE8NUc\"><div jsname=\"ty6ygf\" class=\"YElZX Is7Fhb\"></div></div></div></div><div jsname=\"Rfh2Tc\" class=\"SL4Sz\" id=\"i15\" role=\"alert\"></div></div></div></div><div class=\"Qr7Oae\" role=\"listitem\"><div jsmodel=\"CP1oW\" data-params=\"%.@.[1148283231,&quot;Valor declarado (US $)&quot;,null,0,[[769367752,null,false,null,null,null,null,null,null,null,[]]],null,null,null,null,null,null,[null,&quot;Valor declarado (US $)&quot;]],&quot;i17&quot;,&quot;i18&quot;,&quot;i19&quot;,false]\"><div jscontroller=\"sWGJ4b\" jsaction=\"EEvAHc:yfX9oc;\" jsname=\"WsjYwc\" class=\"geS5n\"><div class=\"z12JJ\"><div class=\"M4DNQ\"><div id=\"i17\" class=\"HoXoMd D1wxyf RjsPE\" role=\"heading\" aria-level=\"3\"><span class=\"M7eMe\">Valor declarado (US $)</span></div><div class=\"gubaDc OIC90c RjsPE\" id=\"i18\"></div></div></div><div jscontroller=\"oCiKKc\" jsaction=\"rcuQ6b:vZc4S;O22p3e:zjh6rb;b2trFe:eVidQc;sPvj8e:d3sQLd;AHmuwe:h06R8;\" class=\"AgroKb\"><div class=\"rFrNMe k3kHxc RdH0ib yqQS1 zKHdkd\" jscontroller=\"pxq3x\" jsaction=\"clickonly:KjsqPd; focus:Jt1EX; blur:fpfTEe; input:Lg5SV\" jsshadow=\"\" jsname=\"YPqjbf\"><div class=\"aCsJod oJeWuf\"><div class=\"aXBtI Wic03c\"><div class=\"Xb9hP\"><input type=\"text\" class=\"whsOnd zHQkBf\" jsname=\"YPqjbf\" autocomplete=\"off\" tabindex=\"0\" aria-labelledby=\"i17\" aria-describedby=\"i18 i19\" aria-disabled=\"false\" dir=\"auto\" data-initial-dir=\"auto\" data-initial-value=\"\"><div jsname=\"LwH6nd\" class=\"ndJi5d snByac\" aria-hidden=\"true\">Tu respuesta</div></div><div class=\"i9lrp mIZh1c\"></div><div jsname=\"XmnwAc\" class=\"OabDMe cXrdqd\"></div></div></div><div class=\"LXRPh\"><div jsname=\"ty6ygf\" class=\"ovnfwe Is7Fhb\"></div></div></div></div><div jsname=\"Rfh2Tc\" class=\"SL4Sz\" id=\"i19\" role=\"alert\"></div></div></div></div><div class=\"Qr7Oae\" role=\"listitem\"><div jsmodel=\"CP1oW\" data-params=\"%.@.[1751619309,&quot;Grantia&quot;,null,0,[[1785967360,null,false,null,null,null,null,null,null,null,[]]],null,null,null,null,null,null,[null,&quot;Grantia&quot;]],&quot;i21&quot;,&quot;i22&quot;,&quot;i23&quot;,false]\"><div jscontroller=\"sWGJ4b\" jsaction=\"EEvAHc:yfX9oc;\" jsname=\"WsjYwc\" class=\"geS5n\"><div class=\"z12JJ\"><div class=\"M4DNQ\"><div id=\"i21\" class=\"HoXoMd D1wxyf RjsPE\" role=\"heading\" aria-level=\"3\"><span class=\"M7eMe\">Grantia</span></div><div class=\"gubaDc OIC90c RjsPE\" id=\"i22\"></div></div></div><div jscontroller=\"oCiKKc\" jsaction=\"rcuQ6b:vZc4S;O22p3e:zjh6rb;b2trFe:eVidQc;sPvj8e:d3sQLd;AHmuwe:h06R8;\" class=\"AgroKb\"><div class=\"rFrNMe k3kHxc RdH0ib yqQS1 zKHdkd\" jscontroller=\"pxq3x\" jsaction=\"clickonly:KjsqPd; focus:Jt1EX; blur:fpfTEe; input:Lg5SV\" jsshadow=\"\" jsname=\"YPqjbf\"><div class=\"aCsJod oJeWuf\"><div class=\"aXBtI Wic03c\"><div class=\"Xb9hP\"><input type=\"text\" class=\"whsOnd zHQkBf\" jsname=\"YPqjbf\" autocomplete=\"off\" tabindex=\"0\" aria-labelledby=\"i21\" aria-describedby=\"i22 i23\" aria-disabled=\"false\" dir=\"auto\" data-initial-dir=\"auto\" data-initial-value=\"\"><div jsname=\"LwH6nd\" class=\"ndJi5d snByac\" aria-hidden=\"true\">Tu respuesta</div></div><div class=\"i9lrp mIZh1c\"></div><div jsname=\"XmnwAc\" class=\"OabDMe cXrdqd\"></div></div></div><div class=\"LXRPh\"><div jsname=\"ty6ygf\" class=\"ovnfwe Is7Fhb\"></div></div></div></div><div jsname=\"Rfh2Tc\" class=\"SL4Sz\" id=\"i23\" role=\"alert\"></div></div></div></div></div><div class=\"ThHDze\" jscontroller=\"lSvzH\" jsaction=\"rcuQ6b:npT2md;JIbuQc:qV61Ff(X5DuWc),Gl574d(QR6bsb),V3upec(GeGHKb),HiUbje(M2UYVd),NPBnCf(OCpkoe); keydown:duASZc\" data-shuffle-seed=\"-8983768345472803022\" data-should-execute-invisible-captcha-challenge=\"false\" data-is-receipt-checked=\"false\"><div class=\"DE3NNc CekdCb\"><div class=\"lRwqcd\"><div role=\"button\" class=\"uArJ5e UQuaGc Y5sE8d VkkpIf QvWxOd\" jscontroller=\"VXdfxd\" jsaction=\"click:cOuCgd; mousedown:UX7yZ; mouseup:lbsD7e; mouseenter:tfO1Yc; mouseleave:JywGue;touchstart:p6p2H; touchmove:FwuNnf; touchend:yfqBxc(preventDefault=true); touchcancel:JMtRjd;focus:AHmuwe; blur:O22p3e; contextmenu:mg9Pef;\" jsshadow=\"\" jsname=\"M2UYVd\" tabindex=\"0\"><div class=\"Fvio9d MbhUzd\" jsname=\"ksKsZd\"></div><div class=\"e19J0b CeoRYc\"></div><span jsslot=\"\" class=\"l4V7wb Fxmcue\"><span class=\"NPEfkd RveJvd snByac\">Enviar</span></span></div></div><div class=\"nYdzXd\"><div role=\"button\" class=\"uArJ5e UQuaGc kCyAyd l3F1ye TFBnVe\" jscontroller=\"VXdfxd\" jsaction=\"click:cOuCgd; mousedown:UX7yZ; mouseup:lbsD7e; mouseenter:tfO1Yc; mouseleave:JywGue;touchstart:p6p2H; touchmove:FwuNnf; touchend:yfqBxc(preventDefault=true); touchcancel:JMtRjd;focus:AHmuwe; blur:O22p3e; contextmenu:mg9Pef;\" jsshadow=\"\" jsname=\"X5DuWc\" tabindex=\"0\"><div class=\"Fvio9d MbhUzd\" jsname=\"ksKsZd\"></div><div class=\"e19J0b CeoRYc\"></div><span jsslot=\"\" class=\"l4V7wb Fxmcue\"><span class=\"NPEfkd RveJvd snByac\">Borrar formulario</span></span></div></div></div><div class=\"T2dutf\">Nunca envíes contraseñas a través de Formularios de Google.</div></div><input type=\"hidden\" name=\"fvv\" value=\"1\"><input type=\"hidden\" name=\"partialResponse\" value=\"[null,null,&quot;-8983768345472803022&quot;]\"><input type=\"hidden\" name=\"pageHistory\" value=\"0\"><input type=\"hidden\" name=\"fbzx\" value=\"-8983768345472803022\"><input type=\"hidden\" name=\"submissionTimestamp\" value=\"-1\"></div></div></form><div><div class=\"v1CNvb sId0Ce\">Google no creó ni aprobó este contenido. <a href=\"https://docs.google.com/forms/u/0/d/e/1FAIpQLSfuU7AOElNQ5oNp-qvGw7YwyWjd-5o60PzK5p8iKNi7Y01eAw/reportabuse?source=https://docs.google.com/forms/d/e/1FAIpQLSfuU7AOElNQ5oNp-qvGw7YwyWjd-5o60PzK5p8iKNi7Y01eAw/viewform\" target=\"_blank\">Denunciar abuso</a> - <a href=\"https://policies.google.com/terms\" target=\"_blank\">Condiciones del Servicio</a> - <a href=\"https://policies.google.com/privacy\" target=\"_blank\">Política de Privacidad</a></div><div class=\"I3zNcc yF4pU\"><a dir=\"auto\" href=\"//www.google.com/forms/about/?utm_source=product&amp;utm_medium=forms_logo&amp;utm_campaign=forms\"><img src=\"https://www.gstatic.com/images/branding/googlelogo/svg/googlelogo_dark_clr_74x24px.svg\" alt=\"Google\" height=\"24px\" width=\"74px\">&nbsp;<span class=\"sUXvCd\">Formularios</span></a></div></div></div><div jscontroller=\"KFVhZe\" jsaction=\"rcuQ6b:npT2md;JIbuQc:feqbab;\" class=\"ZQKQlb\"><div role=\"button\" class=\"U26fgb mUbCce fKz7Od M9Bg4d\" jscontroller=\"VXdfxd\" jsaction=\"click:cOuCgd; mousedown:UX7yZ; mouseup:lbsD7e; mouseenter:tfO1Yc; mouseleave:JywGue; focus:AHmuwe; blur:O22p3e; contextmenu:mg9Pef;touchstart:p6p2H; touchmove:FwuNnf; touchend:yfqBxc(preventDefault=true); touchcancel:JMtRjd;\" jsshadow=\"\" jsname=\"hlkvRb\" aria-label=\"Denunciar un problema ante Google\" aria-disabled=\"false\" tabindex=\"0\" data-tooltip=\"Denunciar un problema ante Google\" data-tooltip-position=\"right\" data-tooltip-vertical-offset=\"1\" data-tooltip-horizontal-offset=\"0\"><div class=\"VTBa7b MbhUzd\" jsname=\"ksKsZd\"></div><span jsslot=\"\" class=\"xjKiLb\"><span class=\"Ce1Y1c\" style=\"top: -12px\"><div class=\"foqfDc\"><div class=\"Y0xAIe BNL9Bd NpcyEe-n5T17d-Bz112c-N7Eqid-BvMwwf\" aria-hidden=\"true\">&nbsp;</div><div class=\"Y0xAIe ivmiLb NpcyEe-n5T17d-Bz112c-N7Eqid-AhqUyc\" aria-hidden=\"true\">&nbsp;</div></div></span></span></div></div></div><script nonce=\"\">var FB_PUBLIC_LOAD_DATA_ = [null,[null,[[2120551428,\"Numero de guia\",null,0,[[2001510577,null,0]],null,null,null,null,null,null,[null,\"Numero de guia\"]],[347172377,\"Proveedor\",null,0,[[1882104105,null,0]],null,null,null,null,null,null,[null,\"Proveedor\"]],[1658363189,\"Descripción\",null,1,[[19556112,null,0]],null,null,null,null,null,null,[null,\"Descripción\"]],[724055335,\"Información adicionl\",null,1,[[1753055326,null,0]],null,null,null,null,null,null,[null,\"Información adicionl\"]],[1148283231,\"Valor declarado (US $)\",null,0,[[769367752,null,0]],null,null,null,null,null,null,[null,\"Valor declarado (US $)\"]],[1751619309,\"Grantia\",null,0,[[1785967360,null,0]],null,null,null,null,null,null,[null,\"Grantia\"]]],null,null,null,null,null,null,null,69,[null,null,null,2,null,null,1],null,null,null,null,[2]],\"/forms\",\"Test\",null,null,null,\"0\",null,0,0,null,\"\",0,\"e/1FAIpQLSfuU7AOElNQ5oNp-qvGw7YwyWjd-5o60PzK5p8iKNi7Y01eAw\",1,\"[{\\\"data\\\":{\\\"value\\\":[]},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"applicationFonts\\\",\\\"6\\\"],\\\"state\\\":{\\\"hashValue\\\":\\\"00000000\\\"}},{\\\"data\\\":{\\\"value\\\":[]},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"domainFonts\\\",\\\"0\\\"],\\\"state\\\":{\\\"hashValue\\\":\\\"00000000\\\"}},{\\\"data\\\":{\\\"familyList\\\":[\\\"Alegreya\\\",\\\"Amatic SC\\\",\\\"Bree Serif\\\",\\\"Calibri\\\",\\\"Cambria\\\",\\\"Merriweather\\\",\\\"Permanent Marker\\\",\\\"Pinyon Script\\\",\\\"Playfair Display\\\",\\\"Proxima Nova\\\",\\\"Roboto\\\",\\\"Roboto Mono\\\",\\\"Ultra\\\",\\\"Varela Round\\\",\\\"Palatino\\\"],\\\"recentlyUsedFamilyList\\\":[\\\"Roboto\\\",\\\"Arial\\\",\\\"Calibri\\\",\\\"Lora\\\",\\\"Times New Roman\\\",\\\"Palatino\\\",\\\"Comfortaa\\\"],\\\"transitionedFamilyList\\\":[\\\"Palatino\\\",\\\"Calibri\\\"],\\\"hasTransitioned\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-fonts\\\"],\\\"state\\\":{\\\"timestamp\\\":1720289278300288}},{\\\"data\\\":{\\\"value\\\":0},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"collaborator-demo-preference\\\"],\\\"state\\\":{\\\"timestamp\\\":1720486165035764}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-mention-dsp\\\"],\\\"state\\\":{\\\"timestamp\\\":1720486165040418}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_colon_emoji_insertion\\\"],\\\"state\\\":{\\\"timestamp\\\":1720486165040418}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"mae-show_addons_menu_promo\\\"],\\\"state\\\":{\\\"timestamp\\\":1673558725773016}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-homescreen-aips\\\"],\\\"state\\\":{\\\"timestamp\\\":1701962840157736}},{\\\"data\\\":{},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-homescreen-asp\\\",\\\"6\\\"],\\\"state\\\":{\\\"timestamp\\\":1716218220508612}},{\\\"data\\\":{\\\"value\\\":0},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-homescreen-ftbdct\\\"],\\\"state\\\":{\\\"timestamp\\\":1701962840157736}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-homescreen-dbs\\\"],\\\"state\\\":{\\\"timestamp\\\":1701962840157736}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-homescreen-ht\\\"],\\\"state\\\":{\\\"timestamp\\\":1701962840157736}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-homescreen-wws\\\"],\\\"state\\\":{\\\"timestamp\\\":1701962840157736}},{\\\"data\\\":{\\\"value\\\":0},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-etg-lvt\\\"],\\\"state\\\":{\\\"timestamp\\\":1720486165050202}},{\\\"data\\\":{\\\"viewMode\\\":1},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-chrome\\\",\\\"2\\\"],\\\"state\\\":{\\\"timestamp\\\":1639324093155337}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_scoped_screen_reader\\\",\\\"2\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_scoped_screen_reader\\\",\\\"3\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_scoped_screen_reader\\\",\\\"1\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_scoped_screen_reader\\\",\\\"5\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_scoped_braille\\\",\\\"2\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_scoped_braille\\\",\\\"3\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_scoped_braille\\\",\\\"1\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_scoped_braille\\\",\\\"5\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_scoped_unified_accessibility\\\",\\\"2\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_scoped_unified_accessibility\\\",\\\"3\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_scoped_unified_accessibility\\\",\\\"1\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_scoped_unified_accessibility\\\",\\\"5\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-screenreader\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-enable_braille\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"docs-mute_collaborators\\\"],\\\"state\\\":{\\\"timestamp\\\":1650903018576564}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_chooser\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_link_form_promo\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_whats_new\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-expand_dasher_options\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"proto\\\":\\\"[]\\\"},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-auto_create_sink\\\"],\\\"state\\\":{\\\"timestamp\\\":1720486165057215}},{\\\"data\\\":{\\\"proto\\\":\\\"[]\\\"},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-ui_version\\\"],\\\"state\\\":{\\\"timestamp\\\":1720486165059303}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-questions_required_by_default\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-collect_usernames_by_default\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"proto\\\":\\\"[]\\\"},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-collect_email_default_choice\\\"],\\\"state\\\":{\\\"timestamp\\\":1720486164809847}},{\\\"data\\\":{\\\"value\\\":0},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-default_point_value\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_assessments_guided_help\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_qxq_guided_help\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_braveheart_guided_help\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_manual_grading_guided_help\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_record_view_guided_help\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_brain_guided_help\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-has_seen_braveheart_theme_warning\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_custom_themes_toast\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_edu_bundle_18_toast\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_quizzes_intro\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_question_import_guided_help\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_locked_mode_guided_help\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_draft_responses_modal\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-expanded_fonts_guided_help\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_published_form_guided_help\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_published_reader_guided_help\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":true},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_formsmith_onboarding_dialog\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}},{\\\"data\\\":{\\\"value\\\":false},\\\"keyPath\\\":[\\\"syncMap\\\",\\\"preferences\\\",\\\"freebird-show_contact_form_owner_by_default\\\"],\\\"state\\\":{\\\"timestamp\\\":1720477805147686}}]\",1,0];</script><script id=\"base-js\" src=\"https://www.gstatic.com/_/freebird/_/js/k=freebird.v.es_419.32VNgIoOoiA.O/am=GAY/d=1/rs=AMjVe6i4iubNos2gnu6tU2kGNUpsC7hNSg/m=viewer_base\" nonce=\"\"></script><span style=\"position: absolute; top: -999px; left: -999px;\"></span><div id=\"chrome-extension-boilerplate-react-vite-content-view-root\"></div>","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as input.","title_case":false,"type":"str"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"required":false,"placeholder":"","show":true,"value":"User","name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"User","name":"sender_name","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Session ID for the message.","title_case":false,"type":"str"}},"description":"Data from extension","icon":"ChatInput","base_classes":["Message"],"display_name":"HTML and ecommerce JSON","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value","sender","sender_name","session_id","files"],"beta":false,"edited":false},"id":"ChatInput-jrj0K"},"selected":false,"width":384,"height":309,"dragging":false,"positionAbsolute":{"x":-2013.2934063488847,"y":-719.1697037701177}},{"id":"ChatOutput-LbVwh","type":"genericNode","position":{"x":-225.80220895085114,"y":-1087.6918238491935},"data":{"type":"ChatOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"data_template":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{text}","name":"data_template","display_name":"Data Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","title_case":false,"type":"str"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as output.","title_case":false,"type":"str"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"required":false,"placeholder":"","show":true,"value":"Machine","name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"AI","name":"sender_name","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Session ID for the message.","title_case":false,"type":"str"}},"description":"Result output","icon":"ChatOutput","base_classes":["Message"],"display_name":"OUTPUT: json with matched data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","sender","sender_name","session_id","data_template"],"beta":false,"edited":false},"id":"ChatOutput-LbVwh"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-225.80220895085114,"y":-1087.6918238491935},"dragging":false},{"id":"TextInput-hH78V","type":"genericNode","position":{"x":-1545.522276016824,"y":-722.4576151123326},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\nfrom typing import Any\nimport re\n\nclass TextInputComponent(Component):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"filter\"\n    \n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        combined_patterns = re.compile(\n            r'(<head.*?>.*?</head>)|'\n            r'(<script.*?>.*?</script>)|'\n            r'(<noscript.*?>.*?</noscript>)|'\n            r'(<style.*?>.*?</style>)|'\n            r'(<!--.*?-->)|'\n            r'(<svg.*?>.*?</svg>)|'\n            r'(<img.*?>)|'\n            r'(<header.*?>.*?</header>)|'\n            r'(<meta.*?>.*?</meta>)|'\n            r'(<footer.*?>.*?</footer>)|'\n            r'(<button.*?>.*?</button>)|'\n            r'(<input.*?type=\"submit\".*?>)|'\n            r'(<source.*?>)|'\n            r'(<picture.*?>.*?</picture>)|'\n            r'(\\sstyle=\".*?\")|'\n            r'(\\ssrc=\".*?\")|'\n            r'(\\shref=\".*?\")|'\n            r'(\\swidth=\".*?\")|'\n            r'(\\sheight=\".*?\")|'\n            r'(\\sdata-a-modal=\".*?\")|'\n            r'(\\sdata-nav-timeline-item=\".*?\")|'\n            r'(\\sdata-acp-tracking=\".*?\")|'\n            r'(\\sdata-input=\".*?\")|'\n            r'(\\scarousel-options=\".*?\")|'\n            r'(\\sdata-asin-list=\".*?\")|',\n            re.DOTALL\n        )\n\n        def remove_patterns(html: str, pattern: Any) -> str:\n            return re.sub(pattern, '', html)\n\n        modified_html = remove_patterns(self.input_value, combined_patterns)\n\n        print(\"HTML input len: \", len(self.input_value))\n        print(\"HTML output len: \", len(modified_html))\n\n        return Message(text=modified_html)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"Get text inputs from the Playground.","icon":"filter","base_classes":["Message"],"display_name":"HTML filter","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":true},"id":"TextInput-hH78V","description":"Get text inputs from the Playground.","display_name":"HTML filter"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-1545.522276016824,"y":-722.4576151123326},"dragging":false}],"edges":[{"source":"TextInput-HooJG","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-HooJGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-uuxpK","targetHandle":"{œfieldNameœ:œjson_exampleœ,œidœ:œPrompt-uuxpKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"json_example","id":"Prompt-uuxpK","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-HooJG","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-HooJG{œdataTypeœ:œTextInputœ,œidœ:œTextInput-HooJGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-uuxpK{œfieldNameœ:œjson_exampleœ,œidœ:œPrompt-uuxpKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","selected":false,"className":""},{"source":"Prompt-uuxpK","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-uuxpKœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-AqTsE","targetHandle":"{œfieldNameœ:œcontextœ,œidœ:œPrompt-AqTsEœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"context","id":"Prompt-AqTsE","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-uuxpK","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-uuxpK{œdataTypeœ:œPromptœ,œidœ:œPrompt-uuxpKœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Prompt-AqTsE{œfieldNameœ:œcontextœ,œidœ:œPrompt-AqTsEœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","selected":false,"className":""},{"source":"Prompt-AqTsE","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-AqTsEœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"OpenAIModel-s8vpH","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-s8vpHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"OpenAIModel-s8vpH","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-AqTsE","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-AqTsE{œdataTypeœ:œPromptœ,œidœ:œPrompt-AqTsEœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-s8vpH{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-s8vpHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"TextInput-LfWTi","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-LfWTiœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-uuxpK","targetHandle":"{œfieldNameœ:œjson_templateœ,œidœ:œPrompt-uuxpKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"json_template","id":"Prompt-uuxpK","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-LfWTi","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-LfWTi{œdataTypeœ:œTextInputœ,œidœ:œTextInput-LfWTiœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-uuxpK{œfieldNameœ:œjson_templateœ,œidœ:œPrompt-uuxpKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":"","selected":false},{"source":"OpenAIModel-s8vpH","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-s8vpHœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"ChatOutput-LbVwh","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-LbVwhœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-LbVwh","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"OpenAIModel","id":"OpenAIModel-s8vpH","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-OpenAIModel-s8vpH{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-s8vpHœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-LbVwh{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-LbVwhœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"ChatInput-jrj0K","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-jrj0Kœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"TextInput-hH78V","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-hH78Vœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"TextInput-hH78V","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-jrj0K","name":"message","output_types":["Message"]}},"id":"reactflow__edge-ChatInput-jrj0K{œdataTypeœ:œChatInputœ,œidœ:œChatInput-jrj0Kœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-TextInput-hH78V{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-hH78Vœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"TextInput-hH78V","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-hH78Vœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-AqTsE","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œPrompt-AqTsEœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"data","id":"Prompt-AqTsE","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-hH78V","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-hH78V{œdataTypeœ:œTextInputœ,œidœ:œTextInput-hH78Vœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-AqTsE{œfieldNameœ:œdataœ,œidœ:œPrompt-AqTsEœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""}],"viewport":{"x":1084.6383985512932,"y":852.5032956039627,"zoom":0.5140569133280336}},"is_component":false,"updated_at":"2024-07-09T17:53:19+00:00","webhook":false,"endpoint_name":null,"id":"2a92282c-99c4-4175-a572-41dc4c2bb6fc","user_id":"160cd125-c365-451f-91a6-512c9ce53b04","folder_id":"97e601aa-7463-44d9-a427-9e072145bea5"},{"name":"HTML input","description":"This will receive the HTML from the service.","icon":null,"icon_bg_color":null,"data":{"edges":[],"nodes":[{"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"This will receive the HTML from the service.","icon":"type","base_classes":["Message"],"display_name":"HTML input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["input_value"],"beta":false,"edited":false,"official":false},"id":"TextInput-rvQgt"},"id":"TextInput-rvQgt","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"is_component":true,"updated_at":"2024-07-07T19:20:55+00:00","webhook":false,"endpoint_name":null,"id":"40cd092a-2d10-49a0-8131-61b61ed879b1","user_id":"160cd125-c365-451f-91a6-512c9ce53b04","folder_id":"97e601aa-7463-44d9-a427-9e072145bea5"},{"name":"HTML filter (1)","description":"Get text inputs from the Playground.","icon":null,"icon_bg_color":null,"data":{"edges":[],"nodes":[{"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\nfrom typing import Any\nimport re\n\nclass TextInputComponent(Component):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"filter\"\n    \n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        combined_patterns = re.compile(\n            r'(<head.*?>.*?</head>)|'\n            r'(<script.*?>.*?</script>)|'\n            r'(<noscript.*?>.*?</noscript>)|'\n            r'(<style.*?>.*?</style>)|'\n            r'(<!--.*?-->)|'\n            r'(<svg.*?>.*?</svg>)|'\n            r'(<img.*?>)|'\n            r'(<header.*?>.*?</header>)|'\n            r'(<footer.*?>.*?</footer>)|'\n            r'(<button.*?>.*?</button>)|'\n            r'(<input.*?type=\"submit\".*?>)|'\n            r'(<source.*?>)|'\n            r'(<picture.*?>.*?</picture>)|'\n            r'(\\sstyle=\".*?\")|'\n            r'(\\ssrc=\".*?\")|'\n            r'(\\shref=\".*?\")|'\n            r'(\\swidth=\".*?\")|'\n            r'(\\sheight=\".*?\")|'\n            r'(\\sdata-a-modal=\".*?\")|'\n            r'(\\sdata-nav-timeline-item=\".*?\")|'\n            r'(\\sdata-acp-tracking=\".*?\")|'\n            r'(\\sclass=\".*?\")|'\n            r'(\\sdata-input=\".*?\")|'\n            r'(\\scarousel-options=\".*?\")|'\n            r'(\\sdata-asin-list=\".*?\")|',\n            re.DOTALL\n        )\n\n        def remove_patterns(html: str, pattern: Any) -> str:\n            return re.sub(pattern, '', html)\n\n        modified_html = remove_patterns(self.input_value, combined_patterns)\n\n        print(\"HTML input len: \", len(self.input_value))\n        print(\"HTML output len: \", len(modified_html))\n\n        return Message(text=modified_html)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"Get text inputs from the Playground.","icon":"filter","base_classes":["Message"],"display_name":"HTML filter","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":true,"official":false},"id":"TextInput-YWNY4","description":"Get text inputs from the Playground.","display_name":"HTML filter"},"id":"TextInput-YWNY4","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"is_component":true,"updated_at":"2024-07-09T00:56:04+00:00","webhook":false,"endpoint_name":null,"id":"c58f5515-e8b7-4517-bca7-dba0a3f51eb3","user_id":"160cd125-c365-451f-91a6-512c9ce53b04","folder_id":"97e601aa-7463-44d9-a427-9e072145bea5"}],"name":"langflow-hackaton","description":"","folder_name":"langflow-hackaton","folder_description":""}